title: {
  label: "Internal design of the TcpForwardChainServer"
  near: top-center
  shape: text
  style.font-size: 24
  style.bold: true
}

# Styles
classes: {
  component: {
    style: {
      stroke: "#2a2a2a"
      fill: "#ffffff"
      font-color: "#2a2a2a"
      border-radius: 10
      shadow: true
    }
  }
  container: {
    style: {
      stroke: "#2a2a2a"
      fill: "#f5f5f5"
      font-color: "#2a2a2a"
      border-radius: 10
      shadow: true
    }
  }
  subcomponent: {
    style: {
      stroke: "#666666"
      fill: "#ffffff"
      font-color: "#2a2a2a"
      border-radius: 5
      shadow: false
    }
  }
}

prev: {
  class: component
  label: "ForwardEvent"
}

chain_forward: {
  class: container
  label: "chain_forward"

  accept: {
    class: component
    label: "TcpListener accepts task"
  }

  stage: {
    class: component
    label: ""
    t: |md
      ### TcpForwardChainServer
      tracks current `tip`
    |
  }

  AcTokio: {
    class: component

    client_supervisor: {
      class: subcomponent
      label: ""
      t: |md
        ### client_supervisor
        maintains a map of live client actors
      |
    }

    client_protocols: {
      class: subcomponent
      label: ""
      t: |md
        ### client_protocols
        supervises the per-miniprotocol actors
      |
    }

    chain_sync: {
      class: subcomponent
      label: ""
      t: |md
        ### chain_sync
        performs initial intersection and<br/>
        tracks outstanding messages to be sent to the client
      |
    }
    chain_sync_handler: {
      class: subcomponent
      label: ""
      t: |md
        ### chain_sync_handler
        runs the `chainsync::Server` mini-protocol
      |
    }

    block_fetch: {class: subcomponent}
    tx_submission: {class: subcomponent}
    keep_alive: {
      class: subcomponent
      label: ""
      t: |md
        ### keep_alive
        runs the `keepalive` ping pong protocol
      |
    }

    client_supervisor -> client_protocols: "spawns for each client connection\nand forwards block updates to all"
    client_protocols -> chain_sync: "forwards block updates"
    chain_sync -> chain_sync_handler: "sends server responses"
    chain_sync_handler -> chain_sync: "requests headers"
    client_protocols -> block_fetch
    client_protocols -> tx_submission
    client_protocols -> keep_alive
  }

  accept -> stage: "new connections as `PeerServer`"
  stage -> AcTokio.client_supervisor: "forwards block updates or received connections"
}

prev -> chain_forward.stage
