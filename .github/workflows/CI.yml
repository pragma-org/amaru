name: Continuous Integration

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: ["*"]

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation for faster from-scratch builds
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  CARGO_PROFILE_RELEASE_LTO: true
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1

jobs:
  sanity:
    name: Sanity
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ runner.os }}
      - name: Check format
        run: cargo fmt-amaru
      - name: Run clippy
        run: cargo clippy-amaru
  build:
    name: Build on ${{ matrix.environments.runner }} with target ${{ matrix.environments.target }}
    strategy:
      fail-fast: false
      matrix:
        environments:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - runner: macos-latest
            target: aarch64-apple-darwin
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            command: test --profile dev-debug
          - runner: ubuntu-latest
            target: wasm32-unknown-unknown
            packages: -p amaru-ledger -p amaru-ouroboros -p slot-arithmetic
            command: build
            setup: rustup target add wasm32-unknown-unknown
          - runner: ubuntu-latest
            target: riscv32im-risc0-zkvm-elf
            packages: -p amaru-ledger -p slot-arithmetic
            extra-args: +nightly -Zbuild-std=std,panic_abort
            command: build
            setup: |
              curl -L https://risczero.com/install | bash
              /home/runner/.risc0/bin/rzup install
              rustup toolchain add nightly-x86_64-unknown-linux-gnu
              rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
          # Disabled for now
          #- runner: ubuntu-latest
          #  target: aarch64-unknown-linux-musl
          #  cross-compile: true
    timeout-minutes: 30
    runs-on: ${{ matrix.environments.runner }}
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ runner.os }}-${{ matrix.environments.target }}
      - name: Run tests
        run: |
          set +e
          EXTRA_ARGS="${{ matrix.environments.extra-args || '' }}"
          SCOPE="${{ matrix.environments.packages || '--workspace' }}"
          COMMAND="${{ matrix.environments.command  || 'test' }}"
          if [[ -n "${{ matrix.environments.setup }}" ]]; then
            echo "Running setup command: ${{ matrix.environments.setup }}"
            ${{ matrix.environments.setup }}
          fi
          if [[ "${{ matrix.environments.cross-compile }}" == "true" ]] ; then
            cargo install cross --git https://github.com/cross-rs/cross
            # cross doesn't load .cargo/config.toml, see https://github.com/cross-rs/cross/issues/562
            $HOME/.cargo/bin/cross $COMMAND --locked --all-features $SCOPE --target ${{ matrix.environments.target }}
          else
            cargo $EXTRA_ARGS $COMMAND $SCOPE --locked --target ${{ matrix.environments.target }}
          fi
          exitcode="$?"
          if [[ "${{ matrix.environments.optional }}" == "true" && "$exitcode" != "0" ]] ; then
            # Propagate failure as a warning
            # but do not fail the job
            echo "::warning::Tests failed with exit code $exitcode"
            exit 0
          else
            exit "$exitcode"
          fi
        shell: bash

  snapshots:
    name: Snapshots
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    env:
      AMARU_PEER_ADDRESS: preprod-node.play.dev.cardano.org:3001
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Cache ledger.db
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/ledger.db
          key: ${{ runner.OS }}-ledger-cache-${{ hashFiles('.ledger.db/**') }}
          restore-keys: |
            ${{ runner.OS }}-ledger-cache-
      - name: Cache chain.db
        uses: actions/cache@v3
        with:
          path: ~/chain.db
          key: ${{ runner.OS }}-chain-cache-${{ hashFiles('.chain.db/**') }}
          restore-keys: |
            ${{ runner.OS }}-chain-cache-
      - name: Bootstrap amaru
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          make bootstrap
      - name: Run node
        timeout-minutes: 30
        run: |
          # Make sure amaru runs long enough so that snapshot tests can be executed
          AMARU_RUN_EXTRA="--network=preprod" make | while read -r line; do
            AMARU_PID=$!
            EPOCH_VALUE=179
            if echo "$line" | jq --arg epoch_value "$EPOCH_VALUE" 'select(.fields.message == "snapshot" and .fields.epoch == ($epoch_value | tonumber))' >/dev/null 2>&1; then
              echo "Received stop signal, stopping the process."
              pkill -P $AMARU_PID
              break
            fi
          done
      - name: Run tests
        run: cargo test --locked --workspace -- --ignored

  examples:
    name: Examples
    strategy:
      fail-fast: false
      matrix:
        projects:
          - path: ledger-in-nodejs
            commands: |
              rustup target add wasm32-unknown-unknown
              make
    defaults:
      run:
        working-directory: examples/${{ matrix.projects.path }}
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.projects.path }}
      - name: Run commands
        run: ${{ matrix.projects.commands }}
