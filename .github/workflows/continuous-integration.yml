name: Continuous Integration

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize, reopened, converted_to_draft, ready_for_review]
    branches: ["*"]

env:
  CARGO_TERM_COLOR: always
  RUST_CACHE_PATH: |
    ~/.cargo/bin/
    ~/.cargo/registry/index/
    ~/.cargo/registry/cache/
    ~/.cargo/git/db/
    target/

jobs:
  build:
    name: Build ${{ matrix.environments.title }}
    strategy:
      fail-fast: false
      matrix:
        environments:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            title: x86_64/linux

          - runner: ubuntu-latest
            target: aarch64-unknown-linux-musl
            title: aarch64/linux
            command: test # This is a cross specific command. Do not change
            setup: rustup target add aarch64-unknown-linux-musl
            cross-compile: true

          - runner: macos-latest
            target: aarch64-apple-darwin
            title: aarch64/macos

          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            title: x86_64/windows
            command: test-amaru --profile dev-debug

          - runner: ubuntu-latest
            target: wasm32-unknown-unknown
            title: wasm32
            packages: -p amaru-consensus -p amaru-ledger -p pure-stage
            command: build
            setup: rustup target add wasm32-unknown-unknown

          - runner: ubuntu-latest
            target: riscv32im-risc0-zkvm-elf
            title: riscv32
            packages: -p amaru-ledger -p amaru-slot-arithmetic -p pure-stage
            extra-args: +nightly -Zbuild-std=std,panic_abort
            command: build
            setup: |
              curl -L https://risczero.com/install | bash
              /home/runner/.risc0/bin/rzup install
              rustup toolchain add nightly-x86_64-unknown-linux-gnu
              rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu

    timeout-minutes: 30
    runs-on: ${{ matrix.environments.runner }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - id: timestamp
        shell: bash
        run: |
          echo "value=$(/bin/date -u '+%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      # Cache dependencies when pushing (i.e. merging into allowed branch).
      - uses: actions/cache@v4
        if: github.event_name == 'push'
        with:
          path: ${{ env.RUST_CACHE_PATH }}
          key: cargo-${{ matrix.environments.target }}-${{ steps.timestamp.outputs.value }}
          restore-keys: |
            cargo-${{ matrix.environments.target }}
      # Only restore cache for other types of events (e.g. Pull requests).
      - uses: actions/cache/restore@v4
        if: github.event_name != 'push'
        with:
          path: ${{ env.RUST_CACHE_PATH }}
          key: cargo-${{ matrix.environments.target }}
          restore-keys: |
            cargo-${{ matrix.environments.target }}
      - name: Run build
        run: |
          set -e
          EXTRA_ARGS="${{ matrix.environments.extra-args || '' }}"
          SCOPE="${{ matrix.environments.packages || '' }}"
          COMMAND="${{ matrix.environments.command  || 'test-amaru' }}"
          if [[ -n "${{ matrix.environments.setup }}" ]]; then
            echo "Running setup command: ${{ matrix.environments.setup }}"
            ${{ matrix.environments.setup }}
          fi
          if [[ "${{ matrix.environments.cross-compile }}" == "true" ]] ; then
            cargo install --force cross --git https://github.com/cross-rs/cross
            # cross doesn't load .cargo/config.toml, see https://github.com/cross-rs/cross/issues/562
            $HOME/.cargo/bin/cross $COMMAND --locked --all-features $SCOPE --target ${{ matrix.environments.target }}
          else
            if [[ "${{ matrix.environments.target }}" == "x86_64-unknown-linux-gnu" ]] ; then
              cargo $EXTRA_ARGS $COMMAND $SCOPE --locked
            else
              cargo $EXTRA_ARGS $COMMAND $SCOPE --locked --target ${{ matrix.environments.target }}
            fi
            # Run doc tests separately as --doc can't be used with --all-targets
            cargo test --doc
          fi
        shell: bash

  coverage:
    name: Test coverage
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: True
      - uses: actions/cache/restore@v4
        with:
          path: ${{ env.RUST_CACHE_PATH }}
          key: cargo-x86_64-unknown-linux-gnu
          restore-keys: |
            cargo-x86_64-unknown-linux-gnu
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: make coverage-lconv
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info

  snapshots:
    name: End-to-end snapshot tests
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    strategy:
      matrix:
        network:
          - name: preprod
            magic: 1
        cardano_node_version: [10.1.4]
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - id: timestamp
        shell: bash
        run: |
          echo "value=$(/bin/date -u '+%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Restore cardano-node DB
        id: cache-cardano-node-db
        uses: actions/cache/restore@v4
        with:
          # The path should match the one used for the 'Nightly Sync' workflow.
          path: ${{ runner.temp }}/db-${{ matrix.network.name }}
          # The key should also match
          key: cardano-node-ogmios-${{ matrix.network.name }}
          restore-keys: |
            cardano-node-ogmios-${{ matrix.network.name }}

      - name: Check if cardano-node-db is available
        if: steps.cache-cardano-node-db.outputs.cache-hit == ''
        run: |
          echo "Haskell node db not available, aborting job."
          exit 1

      - name: Spawn Haskell Node
        id: spawn-cardano-node
        shell: bash
        run: |
          docker pull ghcr.io/intersectmbo/cardano-node:${{ matrix.cardano_node_version }}
          make HASKELL_NODE_CONFIG_DIR=cardano-node-config NETWORK=${{ matrix.network.name }} download-haskell-config
          docker run -d --name cardano-node \
            -v ${{ runner.temp }}/db-${{ matrix.network.name }}:/db \
            -v ${{ runner.temp }}/ipc:/ipc \
            -v ./cardano-node-config:/config \
            -v ./cardano-node-config:/genesis \
            -p 3001:3001 \
            ghcr.io/intersectmbo/cardano-node:${{ matrix.cardano_node_version }} run \
              --config /config/config.json \
              --database-path /db \
              --socket-path /ipc/node.socket \
              --topology /config/topology.json

      - uses: actions/cache/restore@v4
        with:
          path: ${{ env.RUST_CACHE_PATH }}
          key: cargo-x86_64-unknown-linux-gnu
          restore-keys: |
            cargo-x86_64-unknown-linux-gnu

      - name: Build Amaru
        run: |
          cargo test --no-run -p amaru

      - name: Cache Amaru's ledger.${{ matrix.network.name }}.db
        id: cache-ledger-db
        uses: actions/cache/restore@v4
        with:
          path: ./ledger.${{ matrix.network.name }}.db
          # If the ledger store serialisation format changes and become
          # incompatible, it is necessary to bump the index below to invalidate
          # the cached ledger snapshots, and recompute them from the CBOR ones
          # (i.e. Full bootstrap below)
          key: ${{ runner.OS }}-ledger-cache-v9-${{ steps.timestamp.outputs.value }}
          restore-keys: |
            ${{ runner.OS }}-ledger-cache-v9

      - name: Full bootstrap amaru
        if: steps.cache-ledger-db.outputs.cache-hit == ''
        run: |
          make BUILD_PROFILE=test NETWORK=${{ matrix.network.name }} bootstrap

      - name: Light bootstrap amaru
        if: steps.cache-ledger-db.outputs.cache-hit != ''
        run: |
          make BUILD_PROFILE=test NETWORK=${{ matrix.network.name }} import-headers
          make BUILD_PROFILE=test NETWORK=${{ matrix.network.name }} import-nonces

      - uses: actions/cache/save@v4
        if: github.event_name == 'push' || steps.cache-ledger-db.outputs.cache-hit == ''
        with:
          path: ./ledger.${{ matrix.network.name }}.db
          key: ${{ runner.OS }}-ledger-cache-v9-${{ steps.timestamp.outputs.value }}

      - name: Run node
        if: github.event_name == 'pull_request'
        timeout-minutes: 45
        shell: bash
        run: make BUILD_PROFILE=test demo

      - name: Install Cardano CLI
        if: github.event_name != 'pull_request'
        run: |
          set -eux

          VERSION="10.11.0.0"

          curl -L -o cardano-cli.tar.gz \
            "https://github.com/IntersectMBO/cardano-cli/releases/download/cardano-cli-${VERSION}/cardano-cli-${VERSION}-x86_64-linux.tar.gz"

          mkdir -p cardano-cli-bin
          tar -xzf cardano-cli.tar.gz -C cardano-cli-bin
          mv cardano-cli-bin/cardano-cli* cardano-cli-bin/cardano-cli
          ls $PWD/cardano-cli-bin/
          chmod +x cardano-cli-bin/cardano-cli

      - name: Run node until latest epoch (main branch only)
        if: github.event_name != 'pull_request'
        timeout-minutes: 30
        shell: bash
        run: |
          set -eux

          export DEMO_TARGET_EPOCH=$(sudo $PWD/cardano-cli-bin/cardano-cli query tip --socket-path ${{ runner.temp }}/ipc/node.socket --testnet-magic ${{ matrix.network.magic }} | jq '.epoch - 1')
          make BUILD_PROFILE=test demo

      - name: Run tests
        run: |
          make BUILD_PROFILE=test NETWORK=${{ matrix.network.name }} test-e2e

      - name: Teardown haskell node
        shell: bash
        run: |
          docker stop cardano-node
          docker rm cardano-node

      - uses: actions/cache/save@v4
        if: github.event_name == 'push'
        with:
          path: ${{ runner.temp }}/db-${{ matrix.network.name }}
          key: cardano-node-ogmios-${{ matrix.network.name }}-${{ steps.timestamp.outputs.value }}

  examples:
    name: Examples
    strategy:
      fail-fast: false
      matrix:
        projects:
          - ledger-in-nodejs
    defaults:
      run:
        working-directory: examples/${{ matrix.projects }}
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache/restore@v4
        with:
          path: ${{ env.RUST_CACHE_PATH }}
          key: cargo-wasm32-unknown-unknown
          restore-keys: |
            cargo-wasm32-unknown-unknown
      - name: Run make
        run: make
